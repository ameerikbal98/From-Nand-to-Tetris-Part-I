// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Mux16(a = x, b[0..15]=false,sel = zx,out = zerox);
        Not16(in = zerox, out = notx);
        Mux16(a = zerox,b = notx,sel = nx,out = Altx);

        Mux16(a = y, b[0..15]=false,sel = zy,out = zeroy);
        Not16(in = zeroy, out = noty);
        Mux16(a = zeroy,b = noty,sel = ny,out = Alty);

        Add16(a = Altx, b = Alty,out = Addxy);
        And16(a = Altx, b = Alty,out = Andxy);

        Mux16(a = Andxy,b = Addxy, sel = f, out = fo);

        Not16(in = fo, out = nfo);
        Mux16(a = fo, b = nfo, sel = no, out = fino);
        //Mux16(a = fo, b = nfo, sel = no, out = out);

        And16(a[0..15]=true,b=fino,out[15]=ng);

        And16(a[0..15]=true,b=fino,out[0..7]=f8b,out[8..15] = s8b);
        Or8Way(in = f8b,out = zr1);
        Or8Way(in = s8b,out = zr2);
        Or(a = zr1,b = zr2, out = zrt);
        Not(in = zrt, out = zr);


        And16(a[0..15]=true,b=fino,out=out);   
}